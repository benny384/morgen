import java.util.Random;

class BattleshipGame {
    // Matrix, die das Spielfeld darstellt
    private char[][] gameBoard = new char[5][5];

    // Konstruktor, der das Spielfeld initialisiert
    public BattleshipGame() {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                gameBoard[i][j] = '.';
            }
        }
        placeShip();
    }

    // Funktion zum Platzieren des Schiffes auf dem Spielfeld
    private void placeShip() {
        Random rand = new Random();
        boolean isHorizontal = rand.nextBoolean();
        int row, col;

        if (isHorizontal) {
            row = rand.nextInt(5);
            col = rand.nextInt(5-4);
            for (int i = col; i < col+5; i++) {
                gameBoard[row][i] = 'S';
            }
        } else {
            row = rand.nextInt(5-4);
            col = rand.nextInt(5);
            for (int i = row; i < row+5; i++) {
                gameBoard[i][col] = 'S';
            }
        }
    }

    // Funktion zum Schießen auf das Spielfeld
    public boolean shoot(int row, int col) {
        if (gameBoard[row][col] == 'S') {
            gameBoard[row][col] = 'H';
            return true;
        } else {
            gameBoard[row][col] = 'M';
            return false;
        }
    }

    // Funktion zum Anzeigen des aktuellen Spielfelds
    public void printBoard() {
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                System.out.print(gameBoard[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        BattleshipGame game = new BattleshipGame();
        game.printBoard();
        // Beispielaufrufe zum Schießen
        System.out.println(game.shoot(0, 0)); // false
        System.out.println(game.shoot(2, 2)); // true
        game.printBoard();
    }
}
